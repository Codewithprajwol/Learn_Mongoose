import mongoose from 'mongoose'

console.log(mongoose.SchemaType)//? it is used internally by the mongoose if we put some custom types....
console.log(mongoose.Schema.Types)//? it define the type like what field will take this as a type like (String,Number etc)

// mongoose.ObjectId//? here mongoose.ObjectId is an schema type to store the object data of mongodb that is generated by mongodb itself

const newId=new mongoose.Types.ObjectId()
console.log('naya id:-',newId)

//? how we can use Number directly and do have to use mongoose.Schema.Types.Number like this ...how Number is direclty available
//?Mongoose internally maps JavaScript's native types (like String, Number, etc.) to the corresponding Mongoose SchemaType. This means:

//?When you write Number in your schema, Mongoose automatically interprets it as mongoose.Schema.Types.Number.
//?This is a shorthand provided by Mongoose to make schemas easier to define.


//?Options are modifiers or attributes that you apply to these schema types to customize how they are stored, validated, accessed, and presented. 


//? required: boolean or function, if true adds a required validator for this property
//? default: Any or function, sets a default value for the path. If the value is a function, the return value of the function is used as the default.
//? select: boolean, specifies default projections for queries
//? validate: function, adds a validator function for this property
//? get: function, defines a custom getter for this property using Object.defineProperty().
//? set: function, defines a custom setter for this property using Object.defineProperty().
//? alias: string, mongoose >= 4.10.0 only. Defines a virtual with the given name that gets/sets this path.
//? immutable: boolean, defines path as immutable. Mongoose prevents you from changing immutable paths unless the parent document has isNew: true.
//? transform: function, Mongoose calls this function when you call Document#toJSON() function, including when you JSON.stringify() a document.


import { connectDb } from '../config/connect.db.js'
connectDb()


const rootUrl='./assets/image'
const  userSchema=new mongoose.Schema({
    name:String,
    profileImg:{
        type:String,
        get:(v)=>(`${rootUrl}${v}`)
    }
})

const User=mongoose.model('User',userSchema)

const user=new User({name:'prajwol',profileImg:'/123.png'})

//? in actual database only /123.png will be stored but when we conver to json it will call that get function and set the full path or we have to manullay call it.

console.log(user.profileImg)